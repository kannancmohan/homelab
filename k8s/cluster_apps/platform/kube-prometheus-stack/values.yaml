## Official configuration - https://prometheus.io/docs/alerting/latest/configuration/
## Helm chart values - https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
kube-prometheus-stack:
  grafana:
    enabled: false
    # set to true , so as to create grafana datasource configmap. This will be generated even if grafana is disabled in kube-prometheus-stack
    forceDeployDatasources: true
    # set to true , so as to create grafana dashboard configmap. This will be generated even if grafana is disabled in kube-prometheus-stack
    forceDeployDashboards: true
    # additionalDataSources:
    #   - name: Loki
    #     type: loki
    #     url: http://loki-loki-distributed-gateway.loki.svc.cluster.local
  prometheus:
    prometheusSpec:
      # following avoid configuration using Helm graphic values
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      scrapeConfigSelectorNilUsesHelmValues: false
      retention: 10d
      retentionSize: 5GB
  alertmanager:
    alertmanagerSpec:
      # replicas: 2
      ## ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica.
      forceEnableClusterMode: true
      # Additional VolumeMounts on the output StatefulSet definition.
      volumeMounts:
        - name: alertmanager-smtp-secret
          mountPath: '/etc/alertmanager/secrets'
          readOnly: true
      # Additional volumes on the output StatefulSet definition.
      volumes:
        - name: alertmanager-smtp-secret
          secret:
            # Kubernetes secret name
            secretName: alertmanager-smtp-secret
    config:
      global:
        # the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved
        resolve_timeout: 5m
        smtp_from: 'kannanmohanklm@gmail.com'
        smtp_smarthost: 'smtp.gmail.com:587'
        smtp_auth_username: 'kannanmohanklm@gmail.com'
        smtp_auth_identity: 'kannanmohanklm@gmail.com'
        smtp_auth_password_file: '/etc/alertmanager/secrets/smtp_auth_password'
      # Route specifying how to match alerts to their reivers. The root route are inherited by the child routes if they are not overwritten. 
      # Alert manager traverse thought the routes for a match and exit at the first match unless continue is set
      route:
        group_by: ['namespace', 'alertname']
        group_wait: 5s
        group_interval: 5s
        # How long to wait before sending a notification again
        repeat_interval: 1h
        # default receiver
        receiver: 'null'
        routes:
        - matchers:
          - alertname =~ "InfoInhibitor|Watchdog"
          receiver: 'null'
        - matchers:
          - severity =~ "critical|error"
          receiver: 'email'
        # - receiver: 'null'
      # A list of notification receivers
      receivers:
        - name: 'email'
          email_configs:
            - to: 'kannanmohanklm@gmail.com'
              headers: { Subject: "[WARN]" }
              html: '{{ template "email.to.html" . }}'
              send_resolved: true
        - name: 'null'
    templateFiles:
      email_template.tmpl: |-
        {{ define "email.to.html" }}
        {{ range .Alerts }}
        <div style="border:1px solid #ccc; padding:10px; margin-bottom:10px;">
          <h3> Alert</h3>
          <p><strong>Alert Program:</strong> Prometheus Alert</p>
          <p><strong>Severity Level:</strong> {{ .Labels.severity }}</p>
          <p><strong>Alert Type:</strong> {{ .Labels.alertname }}</p>
          <p><strong>Affected Host:</strong> {{ .Labels.instance }}</p>
          <p><strong>Affected Service:</strong> {{ .Labels.job }}</p>
          <p><strong>Alert Subject:</strong> {{ .Annotations.summary }}</p>
          <p><strong>Trigger Time:</strong> {{ .StartsAt.Format "2006-01-02 15:04:05" }}</p>
        </div>
        {{ end }}
        {{ end }}
  ## Disabled monitoring of kube controller , kube proxy and kube scheduler
  kubeControllerManager:
    enabled: false
    # endpoints: [192.168.0.61]
    # service:
    #   enabled: true
    #   port: 10257
    #   targetPort: 10257
    # serviceMonitor:
    #   enabled: true
    #   https: true
    #   insecureSkipVerify: true
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false