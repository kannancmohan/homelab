---
- name: Generate cluster token and certificate key
  run_once: true
  block:
    - name: Generate cluster token # noqa no-changed-when
      ansible.builtin.command: kubeadm token generate
      register: kubetoken_generated

    - name: Set generated token as fact
      ansible.builtin.set_fact:
        kubetoken: "{{ kubetoken_generated.stdout }}"

    # - name: Generate certificate key # noqa no-changed-when
    #   ansible.builtin.command: kubeadm certs certificate-key
    #   register: kubecert_generated

    # - name: Set generated token as fact
    #   ansible.builtin.set_fact:
    #     kubecertkey: "{{ kubecert_generated.stdout }}"

    # - name: Add kubelet config for node
    #   ansible.builtin.template:
    #     src: templates/kubeadm-config.yaml.j2
    #     dest: /tmp/kubeadm-config.yaml
    #     mode: "0755"
- name: Setup kubeadmin in master node
  run_once: true
  become: true
  block:
    - name: Start kubeadm install # noqa no-changed-when # noqa command-instead-of-shell
      ansible.builtin.shell: "kubeadm init --apiserver-advertise-address={{ ansible_host }}  --apiserver-cert-extra-sans={{ ansible_host }}  --pod-network-cidr=10.1.0.0/16 --node-name {{ ansible_hostname }}"
      register: install_result
      failed_when: install_result.rc != 0 or install_result.stderr != ''

    - name: Result of kubeadm installation
      debug:
        var: install_result
      # become: true

    # - name: Get information on generated certificate
    #   community.crypto.x509_certificate_info:
    #     path: /etc/kubernetes/pki/ca.crt
    #   register: cert
    #   become: true

    # - name: Set fact for certificate hash
    #   ansible.builtin.set_fact:
    #     kubehash: "sha256:{{ cert.public_key_fingerprints.sha256 | replace(':', '') }}"

    - name: Create kube directory
      ansible.builtin.file:
        path: /home/{{ ansible_user_id }}/.kube
        state: directory
        mode: "0755"

    - name: Copy kubeconfig
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user_id }}/.kube/config"
        remote_src: true
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0755"

    - name: Fetch kubeconfig file
      ansible.builtin.slurp:
        src: /etc/kubernetes/admin.conf
      register: kube_master

    - name: Set kubeconfig as fact
      ansible.builtin.set_fact:
        kubeconfig: "{{ kube_master['content'] | b64decode }}"

    - name: Set a flag if cluster setup is successful
      ansible.builtin.set_fact:
        k8s_installed: true
